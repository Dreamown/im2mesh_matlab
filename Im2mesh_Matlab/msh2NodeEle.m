function [vert,ele,tnum] = msh2NodeEle( msh )
% msh2NodeEle: convert struct variable 'msh' to nodes and elements.
% Struct variable 'msh' is generated by Gmsh.
%
% usage:
%   [vert,ele,tnum] = msh2NodeEle( msh )
%
% Copyright (C) 2019-2025 by Jiexian Ma, mjx0799@gmail.com
% 
% Project website: https://github.com/mjx888/im2mesh
%

    if isfield(msh, 'TRIANGLES') && ~isfield(msh, 'QUADS')
	    vert = msh.POS(:,1:2);
	    ele = msh.TRIANGLES(:,1:end-1);
	    tnum = msh.TRIANGLES(:,end);
	    ele = fixOrdering( vert, ele );
    
    elseif isfield(msh, 'TRIANGLES6') && ~isfield(msh, 'QUADS9')
	    vert = msh.POS(:,1:2);
	    ele = msh.TRIANGLES6(:,1:end-1);
	    tnum = msh.TRIANGLES6(:,end);
	    ele = fixOrdering( vert, ele );
    
    elseif isfield(msh, 'QUADS')
        if isfield(msh, 'TRIANGLES')
            warning( '%s\n%s', ...
                'The input variable consists of both triangle and quadrilateral elements.', ...
                'Those triangle elements are neglected in the output of function msh2NodeEle.' );
        end

	    vert = msh.POS(:,1:2);
	    ele = msh.QUADS(:,1:end-1);
	    tnum = msh.QUADS(:,end);
	    ele = fixOrdering( vert, ele );
    
    elseif isfield(msh, 'QUADS9')
        if isfield(msh, 'TRIANGLES6')
            warning( '%s\n%s', ...
                'The input variable consists of both triangle and quadrilateral elements.', ...
                'Those triangle elements are neglected in the output of function msh2NodeEle.' );
        end
        
	    vert = msh.POS(:,1:2);
	    ele = msh.QUADS9(:,1:8);
	    tnum = msh.QUADS9(:,end);
	    ele = fixOrdering( vert, ele );
        
    else
        error('Unexpected case.');
    end

end
















