Install_MTEX2Gmsh
--------------
G=gmshGeo(grains);

--------------
% matlab_G.mat

mesh(G,'default.msh')
mesh(G,'constant_elmtSize.msh','ElementSize',50)
mesh(G,'sizeGradient.msh','ElementSize',50,'gradient',0.5);

mesh(G,'sizeGradient.geo','ElementSize',50,'gradient',0.5);

mesh(G,'curvature.msh','Curvature',5);
mesh(G,'Tri.msh','ElementType','Tri');
mesh(G,'Quad.msh','ElementType','Quad');
mesh(G,'QuadOnly.msh','ElementType','QuadOnly');
mesh(G,'brick-quadratic.msh','ElementType','Hex','ElementOrder',2);
--------------
savegeo(G,'geometry.geo')

--------------
save test.mat path_to_gmsh path_to_geo filepath v
--------------
% test_gmsh1.mat
% test_gmsh2.mat

str=sprintf('"%s" "%s" -o "%s" -v %i -save', ... 
			path_to_gmsh, path_to_geo, filepath, v );
system(str);

--------------
delete(path_to_geo)	%	delete temp file

------------
Mesh.Format
Mesh output format (1: msh, 2: unv, 10: auto, 16: vtk, 19: vrml, 21: mail, 26: pos stat, 27: stl, 28: p3d, 30: mesh, 31: bdf, 32: cgns, 33: med, 34: diff, 38: ir3, 39: inp, 40: ply2, 41: celum, 42: su2, 47: tochnog, 49: neu, 50: matlab)
Default value: 10
Saved in: General.OptionsFileName

-------------
str=sprintf('"%s" "%s" -o "%s" -v %i -save', ... 
			path_to_gmsh, path_to_geo, filepath, v );
system(str);
test
tnum = msh.TRIANGLES(:,end);
tria = msh.TRIANGLES(:,1:3);
vert = msh.POS;
plotMeshes( vert, tria, tnum );

-------------
str=sprintf('"%s" "%s" -o "%s" -v %i -save', ... 
			path_to_gmsh, path_to_geo, filepath, v );
system(str);
test
tnum = msh.QUADS(:,end);
tria = msh.QUADS(:,1:4);
vert = msh.POS;
plotMeshes( vert, tria, tnum );

-------------
tnum = msh.TRIANGLES(:,end);
tria = msh.TRIANGLES(:,1:3);
vert = msh.POS;
plotMeshes( vert, tria, tnum );

-------------
tnum = msh.QUADS(:,end);
tria = msh.QUADS(:,1:4);
vert = msh.POS;
plotMeshes( vert, tria, tnum );

-------------
test2.geo - tira. two objects both with hole
test3.geo - tira. two objects both with hole. Add label by Physical Surface("phase01")
test4.geo - tira. two objects both with hole.

-------------
The “MeshAdapt” algorithm4 is based on local mesh modifications. This technique makes use of edge swaps, splits, and collapses: long edges are split, short edges are collapsed, and edges are swapped if a better geometrical configuration is obtained.
The “Delaunay” algorithm is inspired by the work of the GAMMA team at INRIA5. New points are inserted sequentially at the circumcenter of the element that has the largest adimensional circumradius. The mesh is then reconnected using an anisotropic Delaunay criterion.
The “Frontal-Delaunay” algorithm is inspired by the work of S. Rebay6.
Other experimental algorithms with specific features are also available. In particular, “Frontal-Delaunay for Quads”7 is a variant of the “Frontal-Delaunay” algorithm aiming at generating right-angle triangles suitable for recombination; and “BAMG”8 allows to generate anisotropic triangulations.

-------------
Mesh.Algorithm
2D mesh algorithm (1: MeshAdapt, 2: Automatic, 3: Initial mesh only, 5: Delaunay, 6: Frontal-Delaunay, 7: BAMG, 8: Frontal-Delaunay for Quads, 9: Packing of Parallelograms, 11: Quasi-structured Quad)
Default value: 6
Saved in: General.OptionsFileName

-------------
Mesh.SubdivisionAlgorithm
Mesh subdivision algorithm (0: none, 1: all quadrangles, 2: all hexahedra, 3: barycentric)
Default value: 0
Saved in: General.OptionsFileName

-------------
Mesh.RecombinationAlgorithm
Mesh recombination algorithm (0: simple, 1: blossom, 2: simple full-quad, 3: blossom full-quad)
Default value: 1

-------------
// To create quadrangles instead of triangles, one can use the `Recombine'
// command:
Recombine Surface{1};

-------------
// To generate quadrangles instead of triangles, we can simply add

Recombine Surface{100};

// If we'd had several surfaces, we could have used `Recombine Surface {:};'.
// Yet another way would be to specify the global option "Mesh.RecombineAll = 1;".

-------------
// Mesh // Tri.geo
Mesh.SubdivisionAlgorithm=0;
Mesh.Algorithm=6;
Mesh.CharacteristicLengthExtendFromBoundary=1;
Mesh.ElementOrder=1;
Mesh 2;

// Mesh // Quad.geo
Mesh.SubdivisionAlgorithm=0;
Mesh.Algorithm=6;
Mesh.CharacteristicLengthExtendFromBoundary=1;
Mesh.ElementOrder=1;
Mesh 2;

// Mesh // QuadOnly.geo
Mesh.SubdivisionAlgorithm=0;
Mesh.Algorithm=8;
Mesh.CharacteristicLengthExtendFromBoundary=1;
Mesh.ElementOrder=1;
Mesh.RecombineAll = 0;
Mesh.SaveParametric = 0;
Mesh.RecombinationAlgorithm = 0;
Mesh.SecondOrderLinear = 1;
Mesh.SubdivisionAlgorithm=1;
Mesh.MeshSizeFactor=1;
RefineMesh;
Mesh 2;
Mesh 2;














